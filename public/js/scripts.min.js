/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__ (1);
	__webpack_require__ (2);


/***/ },
/* 1 */
/***/ function(module, exports) {

	// main.js
	/* eslint-disable no-undef */
	$(document).ready(function() {
	
	    // find the URL of your JSON file on AWS - it'll be in your bucket
	    // and look something like https://s3-eu-west-1.amazonaws.com/[bucket name]/pollen.json
	    // we load the JSON file using jQuery's AJAX
	    $.get("https://s3-eu-west-1.amazonaws.com/thepollenreport/pollen.json")
	
	    // Once we have the data, we parse it to find the pollen count
	    .done(function(data) {
	        data = JSON.parse(data);
	        const pollen = data.count;
	
	        // update the <h1 class="mega"> with the pollen count
	        $('.mega').text(pollen);
	    })
	
	    // if we couldn't get the data from AWS, display an error message
	    .fail(function() {
	        $('.mega').text('Unknown');
	        $('.main').append('<p>Refresh to try again</p>');
	    })
	
	    .always(function() {
	        // if you're using a loading gif, this is where you'd hide it
	    });
	});


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _stringify = __webpack_require__(3);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//commentbox.js
	/* eslint-disable no-undef */
	/* eslint-disable no-unused-vars*/
	var Comment = React.createClass({
	  displayName: "Comment",
	
	  render: function render() {
	    var md = new Remarkable();
	    return React.createElement(
	      "div",
	      { className: "comment" },
	      React.createElement(
	        "p",
	        null,
	        this.props.author,
	        " says - ",
	        this.props.children
	      )
	    );
	  }
	});
	var CommentList = React.createClass({
	  displayName: "CommentList",
	
	  render: function render() {
	    var commentNodes = this.props.data.map(function (comment) {
	      return React.createElement(
	        Comment,
	        { author: comment.author, key: comment.id },
	        comment.text
	      );
	    });
	    return React.createElement(
	      "div",
	      { className: "commentList" },
	      commentNodes
	    );
	  }
	});
	var CommentForm = React.createClass({
	  displayName: "CommentForm",
	
	  getInitialState: function getInitialState() {
	    return { author: '', text: '' };
	  },
	  handleAuthorChange: function handleAuthorChange(e) {
	    this.setState({ author: e.target.value });
	  },
	  handleTextChange: function handleTextChange(e) {
	    this.setState({ text: e.target.value });
	  },
	  handleSubmit: function handleSubmit(e) {
	    //Stop browser default submit
	    e.preventDefault();
	    var author = this.state.author.trim();
	    var text = this.state.text.trim();
	    if (!text || !author) {
	      return;
	    }
	    var id = Date.now();
	    this.props.onContentSubmit({ id: id.toString(), author: author, text: text });
	    this.setState({ author: '', text: '' });
	  },
	  render: function render() {
	    return React.createElement(
	      "form",
	      { className: "commentForm", onSubmit: this.handleSubmit },
	      React.createElement("input", {
	        type: "text",
	        placeholder: "Your name",
	        value: this.state.author,
	        onChange: this.handleAuthorChange
	      }),
	      React.createElement("input", {
	        type: "text",
	        placeholder: "What you want to say...",
	        value: this.state.text,
	        onChange: this.handleTextChange
	      }),
	      React.createElement("input", { type: "submit", value: "Post" })
	    );
	  }
	});
	var CommentBox = React.createClass({
	  displayName: "CommentBox",
	
	  loadCommentsFromServer: function loadCommentsFromServer() {
	    $.ajax({
	      url: this.props.url,
	      dataType: 'json',
	      cache: false,
	      success: function (data) {
	        console.log(data);
	        this.setState({ data: data });
	      }.bind(this),
	      error: function (xhr, status, err) {
	        console.error(this.props.url, status, err.toString());
	      }.bind(this)
	    });
	  },
	  handleCommentSubmit: function handleCommentSubmit(comment) {
	    // Insert new comment and delete last one
	    this.state.data.splice(0, 0, comment);
	    this.state.data.splice(-1, 1);
	    $.ajax({
	      url: this.props.sendCommentUrl,
	      dataType: 'json',
	      type: 'POST',
	      data: (0, _stringify2.default)(this.state.data),
	      contentType: "application/json",
	      success: function (data) {
	        console.log(data);
	        console.log("After sending " + (0, _stringify2.default)(this.state.data));
	      }.bind(this),
	      error: function (xhr, status, err) {
	        console.error(this.props.sendCommentUrl, status, err.toString());
	      }.bind(this)
	    });
	  },
	  getInitialState: function getInitialState() {
	    return { data: [] };
	  },
	  componentDidMount: function componentDidMount() {
	    this.loadCommentsFromServer();
	    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
	  },
	  render: function render() {
	    return React.createElement(
	      "div",
	      { className: "commentBox" },
	      React.createElement(
	        "h1",
	        null,
	        "Have your say"
	      ),
	      React.createElement(CommentForm, { onContentSubmit: this.handleCommentSubmit }),
	      React.createElement(CommentList, { data: this.state.data })
	    );
	  }
	});
	ReactDOM.render(React.createElement(CommentBox, {
	  url: "https://s3-eu-west-1.amazonaws.com/thepollenreport/comments.json",
	  sendCommentUrl: ("http://localhost:3000/api/v1/comments"),
	  pollInterval: 2000 }), document.getElementById('comments'));

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(4), __esModule: true };

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var core  = __webpack_require__(5)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};

/***/ },
/* 5 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
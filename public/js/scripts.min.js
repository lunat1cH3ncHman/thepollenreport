!function(t){function e(a){if(n[a])return n[a].exports;var o=n[a]={exports:{},id:a,loaded:!1};return t[a].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){n(5),n(1)},function(t,e,n){"use strict";function a(t){return t&&t.__esModule?t:{"default":t}}var o=n(2),r=a(o),s=React.createClass({displayName:"Comment",render:function(){return React.createElement("div",{className:"comment"},React.createElement("p",null,this.props.author," says - ",this.props.children))}}),i=React.createClass({displayName:"CommentList",render:function(){var t=this.props.data.map(function(t){return React.createElement(s,{author:t.author,key:t.id},t.text)});return React.createElement("div",{className:"commentList"},t)}}),c=React.createClass({displayName:"CommentForm",getInitialState:function(){return{author:"",text:""}},handleAuthorChange:function(t){this.setState({author:t.target.value})},handleTextChange:function(t){this.setState({text:t.target.value})},handleSubmit:function(t){t.preventDefault();var e=this.state.author.trim(),n=this.state.text.trim();if(n&&e){var a=Date.now();this.props.onContentSubmit({id:a.toString(),author:e,text:n}),this.setState({author:"",text:""})}},render:function(){return React.createElement("form",{className:"commentForm",onSubmit:this.handleSubmit},React.createElement("input",{type:"text",placeholder:"Your name",value:this.state.author,onChange:this.handleAuthorChange}),React.createElement("input",{type:"text",placeholder:"What you want to say...",value:this.state.text,onChange:this.handleTextChange}),React.createElement("input",{type:"submit",value:"Post"}))}}),l=React.createClass({displayName:"CommentBox",loadCommentsFromServer:function(){$.ajax({url:this.props.url,dataType:"json",cache:!1,success:function(t){console.log(t),this.setState({data:t})}.bind(this),error:function(t,e,n){console.error(this.props.url,e,n.toString())}.bind(this)})},handleCommentSubmit:function(t){this.state.data.splice(0,0,t),this.state.data.splice(-1,1),$.ajax({url:this.props.sendCommentUrl,dataType:"json",type:"POST",data:(0,r["default"])(this.state.data),contentType:"application/json",success:function(t){console.log(t),console.log("After sending "+(0,r["default"])(this.state.data))}.bind(this),error:function(t,e,n){console.error(this.props.sendCommentUrl,e,n.toString())}.bind(this)})},getInitialState:function(){return{data:[]}},componentDidMount:function(){this.loadCommentsFromServer(),setInterval(this.loadCommentsFromServer,this.props.pollInterval)},render:function(){return React.createElement("div",{className:"commentBox"},React.createElement("h1",null,"Have your say"),React.createElement(c,{onContentSubmit:this.handleCommentSubmit}),React.createElement(i,{data:this.state.data}))}});ReactDOM.render(React.createElement(l,{url:"https://s3-eu-west-1.amazonaws.com/thepollenreport/comments.json",sendCommentUrl:"http://localhost:3000/api/v1/comments",pollInterval:2e3}),document.getElementById("comments"))},function(t,e,n){t.exports={"default":n(3),__esModule:!0}},function(t,e,n){var a=n(4),o=a.JSON||(a.JSON={stringify:JSON.stringify});t.exports=function(t){return o.stringify.apply(o,arguments)}},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e){$(document).ready(function(){$.get("https://s3-eu-west-1.amazonaws.com/thepollenreport/pollen.json").done(function(t){t=JSON.parse(t);const e=t.count;$(".mega").text(e)}).fail(function(){$(".mega").text("Unknown"),$(".main").append("<p>Refresh to try again</p>")}).always(function(){})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
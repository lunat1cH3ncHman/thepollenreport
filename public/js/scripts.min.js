!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){n(6),n(1)},function(t,e,n){(function(t){"use strict";function e(t){return t&&t.__esModule?t:{default:t}}var r=n(2),o=e(r),a=React.createClass({displayName:"Comment",render:function(){return React.createElement("div",{className:"comment"},React.createElement("p",null,this.props.author," says - ",this.props.children))}}),i=React.createClass({displayName:"CommentList",render:function(){var t=this.props.data.map(function(t){return React.createElement(a,{author:t.author,key:t.id},t.text)});return React.createElement("div",{className:"commentList"},t)}}),s=React.createClass({displayName:"CommentForm",getInitialState:function(){return{author:"",text:""}},handleAuthorChange:function(t){this.setState({author:t.target.value})},handleTextChange:function(t){this.setState({text:t.target.value})},handleSubmit:function(e){console.log("test node dev: "+t.env.NODE_ENV),e.preventDefault();var n=this.state.author.trim(),r=this.state.text.trim();if(r&&n){var o=Date.now();this.props.onContentSubmit({id:o.toString(),author:n,text:r}),this.setState({author:"",text:""})}},render:function(){return React.createElement("form",{className:"commentForm",onSubmit:this.handleSubmit},React.createElement("input",{type:"text",placeholder:"Your name",value:this.state.author,onChange:this.handleAuthorChange}),React.createElement("input",{type:"text",placeholder:"What you want to say...",value:this.state.text,onChange:this.handleTextChange}),React.createElement("input",{type:"submit",value:"Post"}))}}),c=React.createClass({displayName:"CommentBox",loadCommentsFromServer:function(){$.ajax({url:this.props.url,dataType:"json",cache:!1,success:function(t){console.log(t),this.setState({data:t})}.bind(this),error:function(t,e,n){console.error(this.props.url,e,n.toString())}.bind(this)})},handleCommentSubmit:function(t){this.state.data.splice(0,0,t),this.state.data.splice(-1,1),$.ajax({url:this.props.sendCommentUrl,dataType:"json",type:"POST",data:(0,o.default)(this.state.data),contentType:"application/json",success:function(t){console.log(t),console.log("After sending "+(0,o.default)(this.state.data))}.bind(this),error:function(t,e,n){console.error(this.props.sendCommentUrl,e,n.toString())}.bind(this)})},getInitialState:function(){return{data:[]}},componentDidMount:function(){this.loadCommentsFromServer(),setInterval(this.loadCommentsFromServer,this.props.pollInterval)},render:function(){return React.createElement("div",{className:"commentBox"},React.createElement("h1",null,"Have your say"),React.createElement(s,{onContentSubmit:this.handleCommentSubmit}),React.createElement(i,{data:this.state.data}))}});ReactDOM.render(React.createElement(c,{url:"https://s3-eu-west-1.amazonaws.com/thepollenreport/comments.json",sendCommentUrl:"http://localhost:3000/api/v1/comments",pollInterval:2e3}),document.getElementById("comments"))}).call(e,n(5))},function(t,e,n){t.exports={default:n(3),__esModule:!0}},function(t,e,n){var r=n(4),o=r.JSON||(r.JSON={stringify:JSON.stringify});t.exports=function(t){return o.stringify.apply(o,arguments)}},function(t,e){var n=t.exports={version:"2.6.1"};"number"==typeof __e&&(__e=n)},function(t,e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function a(t){if(m===clearTimeout)return clearTimeout(t);if((m===r||!m)&&clearTimeout)return m=clearTimeout,clearTimeout(t);try{return m(t)}catch(e){try{return m.call(null,t)}catch(e){return m.call(this,t)}}}function i(){f&&p&&(f=!1,p.length?d=p.concat(d):v=-1,d.length&&s())}function s(){if(!f){var t=o(i);f=!0;for(var e=d.length;e;){for(p=d,d=[];++v<e;)p&&p[v].run();v=-1,e=d.length}p=null,f=!1,a(t)}}function c(t,e){this.fun=t,this.array=e}function u(){}var l,m,h=t.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{m="function"==typeof clearTimeout?clearTimeout:r}catch(t){m=r}}();var p,d=[],f=!1,v=-1;h.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];d.push(new c(t,e)),1!==d.length||f||o(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=u,h.addListener=u,h.once=u,h.off=u,h.removeListener=u,h.removeAllListeners=u,h.emit=u,h.prependListener=u,h.prependOnceListener=u,h.listeners=function(t){return[]},h.binding=function(t){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(t){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},function(t,e){$(document).ready(function(){$.get("https://s3-eu-west-1.amazonaws.com/thepollenreport/pollen.json").done(function(t){t=JSON.parse(t);const e=t.count;$(".mega").text(e)}).fail(function(){$(".mega").text("Unknown"),$(".main").append("<p>Refresh to try again</p>")}).always(function(){})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
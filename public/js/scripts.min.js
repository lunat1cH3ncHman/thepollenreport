/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__ (1);
	__webpack_require__ (2);


/***/ },
/* 1 */
/***/ function(module, exports) {

	// main.js
	/* eslint-disable no-undef */
	$(document).ready(function() {
	
	    // find the URL of your JSON file on AWS - it'll be in your bucket
	    // and look something like https://s3-eu-west-1.amazonaws.com/[bucket name]/pollen.json
	    // we load the JSON file using jQuery's AJAX
	    $.get("https://s3-eu-west-1.amazonaws.com/thepollenreport/pollen.json")
	
	    // Once we have the data, we parse it to find the pollen count
	    .done(function(data) {
	        data = JSON.parse(data);
	        const pollen = data.count;
	
	        // update the <h1 class="mega"> with the pollen count
	        $('.mega').text(pollen);
	    })
	
	    // if we couldn't get the data from AWS, display an error message
	    .fail(function() {
	        $('.mega').text('Unknown');
	        $('.main').append('<p>Refresh to try again</p>');
	    })
	
	    .always(function() {
	        // if you're using a loading gif, this is where you'd hide it
	    });
	});


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _stringify = __webpack_require__(4);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//commentbox.js
	/* eslint-disable no-undef */
	/* eslint-disable no-unused-vars*/
	var Comment = React.createClass({
	  displayName: "Comment",
	
	  render: function render() {
	    return React.createElement(
	      "div",
	      { className: "comment" },
	      React.createElement(
	        "p",
	        null,
	        this.props.author,
	        " says - ",
	        this.props.children
	      )
	    );
	  }
	});
	var CommentList = React.createClass({
	  displayName: "CommentList",
	
	  render: function render() {
	    var commentNodes = this.props.data.map(function (comment) {
	      return React.createElement(
	        Comment,
	        { author: comment.author, key: comment.id },
	        comment.text
	      );
	    });
	    return React.createElement(
	      "div",
	      { className: "commentList" },
	      commentNodes
	    );
	  }
	});
	var CommentForm = React.createClass({
	  displayName: "CommentForm",
	
	  getInitialState: function getInitialState() {
	    return { author: '', text: '' };
	  },
	  handleAuthorChange: function handleAuthorChange(e) {
	    this.setState({ author: e.target.value });
	  },
	  handleTextChange: function handleTextChange(e) {
	    this.setState({ text: e.target.value });
	  },
	  handleSubmit: function handleSubmit(e) {
	    console.log("test node dev: " + process.env.NODE_ENV);
	    //Stop browser default submit
	    e.preventDefault();
	    var author = this.state.author.trim();
	    var text = this.state.text.trim();
	    if (!text || !author) {
	      return;
	    }
	    var id = Date.now();
	    this.props.onContentSubmit({ id: id.toString(), author: author, text: text });
	    this.setState({ author: '', text: '' });
	  },
	  render: function render() {
	    return React.createElement(
	      "form",
	      { className: "commentForm", onSubmit: this.handleSubmit },
	      React.createElement("input", {
	        type: "text",
	        placeholder: "Your name",
	        value: this.state.author,
	        onChange: this.handleAuthorChange
	      }),
	      React.createElement("input", {
	        type: "text",
	        placeholder: "What you want to say...",
	        value: this.state.text,
	        onChange: this.handleTextChange
	      }),
	      React.createElement("input", { type: "submit", value: "Post" })
	    );
	  }
	});
	var CommentBox = React.createClass({
	  displayName: "CommentBox",
	
	  loadCommentsFromServer: function loadCommentsFromServer() {
	    $.ajax({
	      url: this.props.url,
	      dataType: 'json',
	      cache: false,
	      success: function (data) {
	        console.log(data);
	        this.setState({ data: data });
	      }.bind(this),
	      error: function (xhr, status, err) {
	        console.error(this.props.url, status, err.toString());
	      }.bind(this)
	    });
	  },
	  handleCommentSubmit: function handleCommentSubmit(comment) {
	    // Insert new comment and delete last one
	    this.state.data.splice(0, 0, comment);
	    this.state.data.splice(-1, 1);
	    $.ajax({
	      url: this.props.sendCommentUrl,
	      dataType: 'json',
	      type: 'POST',
	      data: (0, _stringify2.default)(this.state.data),
	      contentType: "application/json",
	      success: function (data) {
	        console.log(data);
	        console.log("After sending " + (0, _stringify2.default)(this.state.data));
	      }.bind(this),
	      error: function (xhr, status, err) {
	        console.error(this.props.sendCommentUrl, status, err.toString());
	      }.bind(this)
	    });
	  },
	  getInitialState: function getInitialState() {
	    return { data: [] };
	  },
	  componentDidMount: function componentDidMount() {
	    this.loadCommentsFromServer();
	    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
	  },
	  render: function render() {
	    return React.createElement(
	      "div",
	      { className: "commentBox" },
	      React.createElement(
	        "h1",
	        null,
	        "Have your say"
	      ),
	      React.createElement(CommentForm, { onContentSubmit: this.handleCommentSubmit }),
	      React.createElement(CommentList, { data: this.state.data })
	    );
	  }
	});
	ReactDOM.render(React.createElement(CommentBox, {
	  url: "https://s3-eu-west-1.amazonaws.com/thepollenreport/comments.json",
	  sendCommentUrl: ("http://localhost:3000/api/v1/comments"),
	  pollInterval: 2000 }), document.getElementById('comments'));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	(function () {
	    try {
	        cachedSetTimeout = setTimeout;
	    } catch (e) {
	        cachedSetTimeout = function () {
	            throw new Error('setTimeout is not defined');
	        }
	    }
	    try {
	        cachedClearTimeout = clearTimeout;
	    } catch (e) {
	        cachedClearTimeout = function () {
	            throw new Error('clearTimeout is not defined');
	        }
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        return setTimeout(fun, 0);
	    } else {
	        return cachedSetTimeout.call(null, fun, 0);
	    }
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        clearTimeout(marker);
	    } else {
	        cachedClearTimeout.call(null, marker);
	    }
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(5), __esModule: true };

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var core  = __webpack_require__(6)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNDEyYWI4NzU0MzMwNjMzY2YxMWEiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL3NjcmlwdHMuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL2NvbW1lbnRib3guanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ3RDQTtBQUNBOzs7Ozs7O0FDREE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBO0FBQ0EsTUFBSztBQUNMLEVBQUM7Ozs7Ozs7Ozs7Ozs7OztBQzNCRDtBQUNBO0FBQ0E7QUFDQSxLQUFNLFVBQVUsTUFBTSxXQUFOLENBQWtCO0FBQUE7O0FBQ2hDLFdBQU8sa0JBQVU7QUFDZixZQUNFO0FBQUE7QUFBQSxTQUFLLFdBQVUsU0FBZjtBQUNFO0FBQUE7QUFBQTtBQUFJLGNBQUssS0FBTCxDQUFXLE1BQWY7QUFBQTtBQUErQixjQUFL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O0FBQ0Esc0JBQXFCO0FBQ3JCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsNkJBQTRCLFVBQVU7Ozs7Ozs7QUNuSXRDLG1CQUFrQix1RDs7Ozs7O0FDQWxCO0FBQ0Esd0NBQXVDLDBCQUEwQjtBQUNqRSx5Q0FBd0M7QUFDeEM7QUFDQSxHOzs7Ozs7QUNKQSw4QkFBNkI7QUFDN0Isc0NBQXFDLGdDIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCA0MTJhYjg3NTQzMzA2MzNjZjExYVxuICoqLyIsInJlcXVpcmUgKCcuL21haW4uanMnKTtcbnJlcXVpcmUgKCcuL2NvbW1lbnRib3guanMnKTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9wdWJsaWMvanMvc2NyaXB0cy5qc1xuICoqIG1vZHVsZSBpZCA9IDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIG1haW4uanNcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblxuICAgIC8vIGZpbmQgdGhlIFVSTCBvZiB5b3VyIEpTT04gZmlsZSBvbiBBV1MgLSBpdCdsbCBiZSBpbiB5b3VyIGJ1Y2tldFxuICAgIC8vIGFuZCBsb29rIHNvbWV0aGluZyBsaWtlIGh0dHBzOi8vczMtZXUtd2VzdC0xLmFtYXpvbmF3cy5jb20vW2J1Y2tldCBuYW1lXS9wb2xsZW4uanNvblxuICAgIC8vIHdlIGxvYWQgdGhlIEpTT04gZmlsZSB1c2luZyBqUXVlcnkncyBBSkFYXG4gICAgJC5nZXQoXCJodHRwczovL3MzLWV1LXdlc3QtMS5hbWF6b25hd3MuY29tL3RoZXBvbGxlbnJlcG9ydC9wb2xsZW4uanNvblwiKVxuXG4gICAgLy8gT25jZSB3ZSBoYXZlIHRoZSBkYXRhLCB3ZSBwYXJzZSBpdCB0byBmaW5kIHRoZSBwb2xsZW4gY291bnRcbiAgICAuZG9uZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICBjb25zdCBwb2xsZW4gPSBkYXRhLmNvdW50O1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgPGgxIGNsYXNzPVwibWVnYVwiPiB3aXRoIHRoZSBwb2xsZW4gY291bnRcbiAgICAgICAgJCgnLm1lZ2EnKS50ZXh0KHBvbGxlbik7XG4gICAgfSlcblxuICAgIC8vIGlmIHdlIGNvdWxkbid0IGdldCB0aGUgZGF0YSBmcm9tIEFXUywgZGlzcGxheSBhbiBlcnJvciBtZXNzYWdlXG4gICAgLmZhaWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICQoJy5tZWdhJykudGV4dCgnVW5rbm93bicpO1xuICAgICAgICAkKCcubWFpbicpLmFwcGVuZCgnPHA+UmVmcmVzaCB0byB0cnkgYWdhaW48L3A+Jyk7XG4gICAgfSlcblxuICAgIC5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGlmIHlvdSdyZSB1c2luZyBhIGxvYWRpbmcgZ2lmLCB0aGlzIGlzIHdoZXJlIHlvdSdkIGhpZGUgaXRcbiAgICB9KTtcbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3B1YmxpYy9qcy9tYWluLmpzXG4gKiogbW9kdWxlIGlkID0gMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy9jb21tZW50Ym94LmpzXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMqL1xuY29uc3QgQ29tbWVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcmVuZGVyOmZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50XCI+XG4gICAgICAgIDxwPnt0aGlzLnByb3BzLmF1dGhvcn0gc2F5cyAtIHt0aGlzLnByb3BzLmNoaWxkcmVufTwvcD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0pO1xuY29uc3QgQ29tbWVudExpc3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHJlbmRlcjogZnVuY3Rpb24oKXtcbiAgICBjb25zdCBjb21tZW50Tm9kZXMgPSB0aGlzLnByb3BzLmRhdGEubWFwKGZ1bmN0aW9uKGNvbW1lbnQpe1xuICAgICAgcmV0dXJuKFxuICAgICAgICA8Q29tbWVudCBhdXRob3I9e2NvbW1lbnQuYXV0aG9yfSBrZXk9e2NvbW1lbnQuaWR9PlxuICAgICAgICAgIHtjb21tZW50LnRleHR9XG4gICAgICAgIDwvQ29tbWVudD5cbiAgICAgICk7XG4gICAgfSk7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50TGlzdFwiPlxuICAgICAgICB7Y29tbWVudE5vZGVzfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSk7XG5jb25zdCBDb21tZW50Rm9ybSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpe1xuICAgIHJldHVybnthdXRob3I6ICcnLCB0ZXh0OiAnJ307XG4gIH0sXG4gIGhhbmRsZUF1dGhvckNoYW5nZTogZnVuY3Rpb24oZSl7XG4gICAgdGhpcy5zZXRTdGF0ZSh7YXV0aG9yOiBlLnRhcmdldC52YWx1ZX0pO1xuICB9LFxuICBoYW5kbGVUZXh0Q2hhbmdlOiBmdW5jdGlvbihlKXtcbiAgICB0aGlzLnNldFN0YXRlKHt0ZXh0OiBlLnRhcmdldC52YWx1ZX0pO1xuICB9LFxuICBoYW5kbGVTdWJtaXQ6IGZ1bmN0aW9uKGUpe1xuICAgIGNvbnNvbGUubG9nKFwidGVzdCBub2RlIGRldjogXCIgKyBwcm9jZXNzLmVudi5OT0RFX0VOVik7XG4gICAgLy9TdG9wIGJyb3dzZXIgZGVmYXVsdCBzdWJtaXRcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IGF1dGhvciA9IHRoaXMuc3RhdGUuYXV0aG9yLnRyaW0oKTtcbiAgICBsZXQgdGV4dCA9ICB0aGlzLnN0YXRlLnRleHQudHJpbSgpO1xuICAgIGlmICghdGV4dCB8fCAhYXV0aG9yKXtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGlkID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLnByb3BzLm9uQ29udGVudFN1Ym1pdCh7aWQ6IGlkLnRvU3RyaW5nKCksIGF1dGhvcjogYXV0aG9yLCB0ZXh0OiB0ZXh0fSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7YXV0aG9yOiAnJywgdGV4dDogJyd9KTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbigpe1xuICAgIHJldHVybihcbiAgICAgIDxmb3JtIGNsYXNzTmFtZT1cImNvbW1lbnRGb3JtXCIgb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fT5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiWW91ciBuYW1lXCJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5hdXRob3J9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQXV0aG9yQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJXaGF0IHlvdSB3YW50IHRvIHNheS4uLlwiXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudGV4dH1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVUZXh0Q2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwiUG9zdFwiIC8+XG4gICAgICA8L2Zvcm0+XG4gICAgKTtcbiAgfVxufSk7XG5jb25zdCBDb21tZW50Qm94ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBsb2FkQ29tbWVudHNGcm9tU2VydmVyOiBmdW5jdGlvbigpe1xuICAgICQuYWpheCh7XG4gICAgICB1cmw6IHRoaXMucHJvcHMudXJsLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2RhdGE6IGRhdGF9KTtcbiAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIHN0YXR1cywgZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IodGhpcy5wcm9wcy51cmwsIHN0YXR1cywgZXJyLnRvU3RyaW5nKCkpO1xuICAgICAgfS5iaW5kKHRoaXMpXG4gICAgfSk7XG4gIH0sXG4gIGhhbmRsZUNvbW1lbnRTdWJtaXQ6IGZ1bmN0aW9uKGNvbW1lbnQpe1xuICAgIC8vIEluc2VydCBuZXcgY29tbWVudCBhbmQgZGVsZXRlIGxhc3Qgb25lXG4gICAgdGhpcy5zdGF0ZS5kYXRhLnNwbGljZSgwLCAwLCBjb21tZW50KTtcbiAgICB0aGlzLnN0YXRlLmRhdGEuc3BsaWNlKC0xLCAxKTtcbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOiB0aGlzLnByb3BzLnNlbmRDb21tZW50VXJsLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUuZGF0YSksXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFmdGVyIHNlbmRpbmcgXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLmRhdGEpKTtcbiAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIHN0YXR1cywgZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IodGhpcy5wcm9wcy5zZW5kQ29tbWVudFVybCwgc3RhdHVzLCBlcnIudG9TdHJpbmcoKSk7XG4gICAgICB9LmJpbmQodGhpcylcbiAgICB9KTtcbiAgfSxcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB7ZGF0YTogW119O1xuICB9LFxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5sb2FkQ29tbWVudHNGcm9tU2VydmVyKCk7XG4gICAgc2V0SW50ZXJ2YWwodGhpcy5sb2FkQ29tbWVudHNGcm9tU2VydmVyLCB0aGlzLnByb3BzLnBvbGxJbnRlcnZhbCk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1lbnRCb3hcIj5cbiAgICAgICAgPGgxPkhhdmUgeW91ciBzYXk8L2gxPlxuICAgICAgICA8Q29tbWVudEZvcm0gb25Db250ZW50U3VibWl0PXt0aGlzLmhhbmRsZUNvbW1lbnRTdWJtaXR9Lz5cbiAgICAgICAgPENvbW1lbnRMaXN0IGRhdGE9e3RoaXMuc3RhdGUuZGF0YX0vPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSk7XG5SZWFjdERPTS5yZW5kZXIoXG4gIDxDb21tZW50Qm94XG4gICAgdXJsPVwiaHR0cHM6Ly9zMy1ldS13ZXN0LTEuYW1hem9uYXdzLmNvbS90aGVwb2xsZW5yZXBvcnQvY29tbWVudHMuanNvblwiXG4gICAgc2VuZENvbW1lbnRVcmw9e0NPTU1FTlRTX0FQSV9VUkx9XG4gICAgcG9sbEludGVydmFsPXsyMDAwfS8+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWVudHMnKVxuKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vcHVibGljL2pzL2NvbW1lbnRib3guanNcbiAqKi8iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaXMgbm90IGRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBpcyBub3QgZGVmaW5lZCcpO1xuICAgICAgICB9XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgfVxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgIH1cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9wcm9jZXNzL2Jyb3dzZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanNcbiAqKiBtb2R1bGUgaWQgPSA0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgY29yZSAgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJylcbiAgLCAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0ge3N0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnl9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gJEpTT04uc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmd1bWVudHMpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkuanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanNcbiAqKiBtb2R1bGUgaWQgPSA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9